// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NoteFooter correct render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NoteFooter
    activeNotes={true}
    note={
      Object {
        "color": 2,
        "created": 1551714600000,
        "id": 1,
        "size": "s",
        "tags": Array [
          1,
          2,
        ],
        "text": "Не забыть сверстать макет",
        "title": "Завтра дедлайн",
        "type": "text",
      }
    }
    setPatchItem={[Function]}
    setPopup={[Function]}
    tags={
      Array [
        "Покупки",
        "Работа",
        "ШРИ",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Tags
          tags={
            Array [
              "Покупки",
              "Работа",
              "ШРИ",
            ]
          }
        />,
        <div
          className="wrapper"
        >
          <Connect(Edit)
            note={
              Object {
                "color": 2,
                "created": 1551714600000,
                "id": 1,
                "size": "s",
                "tags": Array [
                  1,
                  2,
                ],
                "text": "Не забыть сверстать макет",
                "title": "Завтра дедлайн",
                "type": "text",
              }
            }
            setPatchItem={[Function]}
            setPopup={[Function]}
          />
          <Date
            created={1551714600000}
          />
        </div>,
      ],
      "className": "footer",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "tags": Array [
            "Покупки",
            "Работа",
            "ШРИ",
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(Edit)
              note={
                Object {
                  "color": 2,
                  "created": 1551714600000,
                  "id": 1,
                  "size": "s",
                  "tags": Array [
                    1,
                    2,
                  ],
                  "text": "Не забыть сверстать макет",
                  "title": "Завтра дедлайн",
                  "type": "text",
                }
              }
              setPatchItem={[Function]}
              setPopup={[Function]}
            />,
            <Date
              created={1551714600000}
            />,
          ],
          "className": "wrapper",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "note": Object {
                "color": 2,
                "created": 1551714600000,
                "id": 1,
                "size": "s",
                "tags": Array [
                  1,
                  2,
                ],
                "text": "Не забыть сверстать макет",
                "title": "Завтра дедлайн",
                "type": "text",
              },
              "setPatchItem": [Function],
              "setPopup": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "created": 1551714600000,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Tags
            tags={
              Array [
                "Покупки",
                "Работа",
                "ШРИ",
              ]
            }
          />,
          <div
            className="wrapper"
          >
            <Connect(Edit)
              note={
                Object {
                  "color": 2,
                  "created": 1551714600000,
                  "id": 1,
                  "size": "s",
                  "tags": Array [
                    1,
                    2,
                  ],
                  "text": "Не забыть сверстать макет",
                  "title": "Завтра дедлайн",
                  "type": "text",
                }
              }
              setPatchItem={[Function]}
              setPopup={[Function]}
            />
            <Date
              created={1551714600000}
            />
          </div>,
        ],
        "className": "footer",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "tags": Array [
              "Покупки",
              "Работа",
              "ШРИ",
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(Edit)
                note={
                  Object {
                    "color": 2,
                    "created": 1551714600000,
                    "id": 1,
                    "size": "s",
                    "tags": Array [
                      1,
                      2,
                    ],
                    "text": "Не забыть сверстать макет",
                    "title": "Завтра дедлайн",
                    "type": "text",
                  }
                }
                setPatchItem={[Function]}
                setPopup={[Function]}
              />,
              <Date
                created={1551714600000}
              />,
            ],
            "className": "wrapper",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "note": Object {
                  "color": 2,
                  "created": 1551714600000,
                  "id": 1,
                  "size": "s",
                  "tags": Array [
                    1,
                    2,
                  ],
                  "text": "Не забыть сверстать макет",
                  "title": "Завтра дедлайн",
                  "type": "text",
                },
                "setPatchItem": [Function],
                "setPopup": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "created": 1551714600000,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
