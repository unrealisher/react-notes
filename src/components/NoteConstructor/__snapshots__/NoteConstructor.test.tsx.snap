// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NoteConstructor correct render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NoteConstructor
    note={
      Object {
        "color": 2,
        "created": 1551714600000,
        "id": 1,
        "size": "s",
        "tags": Array [
          1,
          2,
        ],
        "text": "Не забыть сверстать макет",
        "title": "Завтра дедлайн",
        "type": "text",
      }
    }
    onAddItem={[Function]}
    onPatchItem={[Function]}
    setPatchItem={[Function]}
    setPopup={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="popup"
      >
        <button
          className="exit"
          onClick={[Function]}
        />
        <TypeList
          items={
            Array [
              Object {
                "text": "Список",
                "value": "list",
              },
              Object {
                "text": "Текст",
                "value": "text",
              },
              Object {
                "text": "Картинка",
                "value": "image",
              },
            ]
          }
          name="type"
          onTypeChange={[Function]}
          type="text"
          wrapper="wrapper"
        />
        <ConstructorReminder
          reminder={0}
          setReminder={[Function]}
        />
        <label
          className="title_wrapper"
        >
          <span
            className="title"
          >
            Заголовок:
          </span>
          <input
            className="title_input"
            onChange={[Function]}
            type="text"
            value=""
          />
        </label>
        <Connect(ConstructorColors)
          color={-1}
          setColor={[Function]}
          wrapper="wrapper"
        />
        <TextConstructor
          setText={[Function]}
          text=""
          wrapper="wrapper"
        />
        <Connect(TagsList)
          activeTags={Array []}
          setTags={[Function]}
        />
        <ConstructorAttachments
          checked={false}
          items={Array []}
          name="attach"
          onTypeChange={[Function]}
          setAttachItems={[Function]}
          setChecked={[Function]}
          type="link"
        />
        <button
          className="button"
          onClick={[Function]}
          type="button"
        >
          Готово!
        </button>
      </div>,
      "className": "background",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="exit"
            onClick={[Function]}
          />,
          <TypeList
            items={
              Array [
                Object {
                  "text": "Список",
                  "value": "list",
                },
                Object {
                  "text": "Текст",
                  "value": "text",
                },
                Object {
                  "text": "Картинка",
                  "value": "image",
                },
              ]
            }
            name="type"
            onTypeChange={[Function]}
            type="text"
            wrapper="wrapper"
          />,
          <ConstructorReminder
            reminder={0}
            setReminder={[Function]}
          />,
          <label
            className="title_wrapper"
          >
            <span
              className="title"
            >
              Заголовок:
            </span>
            <input
              className="title_input"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>,
          <Connect(ConstructorColors)
            color={-1}
            setColor={[Function]}
            wrapper="wrapper"
          />,
          <TextConstructor
            setText={[Function]}
            text=""
            wrapper="wrapper"
          />,
          false,
          false,
          <Connect(TagsList)
            activeTags={Array []}
            setTags={[Function]}
          />,
          <ConstructorAttachments
            checked={false}
            items={Array []}
            name="attach"
            onTypeChange={[Function]}
            setAttachItems={[Function]}
            setChecked={[Function]}
            type="link"
          />,
          <button
            className="button"
            onClick={[Function]}
            type="button"
          >
            Готово!
          </button>,
        ],
        "className": "popup",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "exit",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "items": Array [
              Object {
                "text": "Список",
                "value": "list",
              },
              Object {
                "text": "Текст",
                "value": "text",
              },
              Object {
                "text": "Картинка",
                "value": "image",
              },
            ],
            "name": "type",
            "onTypeChange": [Function],
            "type": "text",
            "wrapper": "wrapper",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "reminder": 0,
            "setReminder": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="title"
              >
                Заголовок:
              </span>,
              <input
                className="title_input"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
            "className": "title_wrapper",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Заголовок:",
                "className": "title",
              },
              "ref": null,
              "rendered": "Заголовок:",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "title_input",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": Object {
                "current": null,
              },
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "color": -1,
            "setColor": [Function],
            "wrapper": "wrapper",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "setText": [Function],
            "text": "",
            "wrapper": "wrapper",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeTags": Array [],
            "setTags": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "checked": false,
            "items": Array [],
            "name": "attach",
            "onTypeChange": [Function],
            "setAttachItems": [Function],
            "setChecked": [Function],
            "type": "link",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Готово!",
            "className": "button",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Готово!",
          "type": "button",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="popup"
        >
          <button
            className="exit"
            onClick={[Function]}
          />
          <TypeList
            items={
              Array [
                Object {
                  "text": "Список",
                  "value": "list",
                },
                Object {
                  "text": "Текст",
                  "value": "text",
                },
                Object {
                  "text": "Картинка",
                  "value": "image",
                },
              ]
            }
            name="type"
            onTypeChange={[Function]}
            type="text"
            wrapper="wrapper"
          />
          <ConstructorReminder
            reminder={0}
            setReminder={[Function]}
          />
          <label
            className="title_wrapper"
          >
            <span
              className="title"
            >
              Заголовок:
            </span>
            <input
              className="title_input"
              onChange={[Function]}
              type="text"
              value=""
            />
          </label>
          <Connect(ConstructorColors)
            color={-1}
            setColor={[Function]}
            wrapper="wrapper"
          />
          <TextConstructor
            setText={[Function]}
            text=""
            wrapper="wrapper"
          />
          <Connect(TagsList)
            activeTags={Array []}
            setTags={[Function]}
          />
          <ConstructorAttachments
            checked={false}
            items={Array []}
            name="attach"
            onTypeChange={[Function]}
            setAttachItems={[Function]}
            setChecked={[Function]}
            type="link"
          />
          <button
            className="button"
            onClick={[Function]}
            type="button"
          >
            Готово!
          </button>
        </div>,
        "className": "background",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="exit"
              onClick={[Function]}
            />,
            <TypeList
              items={
                Array [
                  Object {
                    "text": "Список",
                    "value": "list",
                  },
                  Object {
                    "text": "Текст",
                    "value": "text",
                  },
                  Object {
                    "text": "Картинка",
                    "value": "image",
                  },
                ]
              }
              name="type"
              onTypeChange={[Function]}
              type="text"
              wrapper="wrapper"
            />,
            <ConstructorReminder
              reminder={0}
              setReminder={[Function]}
            />,
            <label
              className="title_wrapper"
            >
              <span
                className="title"
              >
                Заголовок:
              </span>
              <input
                className="title_input"
                onChange={[Function]}
                type="text"
                value=""
              />
            </label>,
            <Connect(ConstructorColors)
              color={-1}
              setColor={[Function]}
              wrapper="wrapper"
            />,
            <TextConstructor
              setText={[Function]}
              text=""
              wrapper="wrapper"
            />,
            false,
            false,
            <Connect(TagsList)
              activeTags={Array []}
              setTags={[Function]}
            />,
            <ConstructorAttachments
              checked={false}
              items={Array []}
              name="attach"
              onTypeChange={[Function]}
              setAttachItems={[Function]}
              setChecked={[Function]}
              type="link"
            />,
            <button
              className="button"
              onClick={[Function]}
              type="button"
            >
              Готово!
            </button>,
          ],
          "className": "popup",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "exit",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "items": Array [
                Object {
                  "text": "Список",
                  "value": "list",
                },
                Object {
                  "text": "Текст",
                  "value": "text",
                },
                Object {
                  "text": "Картинка",
                  "value": "image",
                },
              ],
              "name": "type",
              "onTypeChange": [Function],
              "type": "text",
              "wrapper": "wrapper",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "reminder": 0,
              "setReminder": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="title"
                >
                  Заголовок:
                </span>,
                <input
                  className="title_input"
                  onChange={[Function]}
                  type="text"
                  value=""
                />,
              ],
              "className": "title_wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Заголовок:",
                  "className": "title",
                },
                "ref": null,
                "rendered": "Заголовок:",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "title_input",
                  "onChange": [Function],
                  "type": "text",
                  "value": "",
                },
                "ref": Object {
                  "current": null,
                },
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "color": -1,
              "setColor": [Function],
              "wrapper": "wrapper",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "setText": [Function],
              "text": "",
              "wrapper": "wrapper",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "activeTags": Array [],
              "setTags": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "checked": false,
              "items": Array [],
              "name": "attach",
              "onTypeChange": [Function],
              "setAttachItems": [Function],
              "setChecked": [Function],
              "type": "link",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Готово!",
              "className": "button",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": "Готово!",
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
